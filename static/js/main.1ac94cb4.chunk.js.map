{"version":3,"sources":["components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","useState","counter","setCounter","useEffect","console","log","className","onClick","type","value","onChange","e","target","parseInt","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAiCeA,MA/Bf,WAII,IAEA,EAA8BC,mBAFP,GAEvB,mBAAOC,EAAP,KAAgBC,EAAhB,KASA,OARAC,qBAAU,WAKNC,QAAQC,IAAI,WACZJ,GARe,KAQUC,EARV,OAShB,CAACD,IAEA,8BACI,sBAAKK,UAAU,gCAAf,UACI,qBAAKA,UAAU,WAAWC,QAAS,kBAAML,EAAWD,EAAU,IAA9D,oBACA,qBAAKK,UAAU,WAAf,SAGI,uBAAOE,KAAK,SAASC,MAAOR,EACxBS,SAAU,SAAAC,GAAC,OAAIT,EAAWS,EAAEC,OAAOH,OAASI,SAASF,EAAEC,OAAOH,aAEtE,qBAAKH,UAAU,WAAWC,QAAS,kBAAML,EAAWD,EAAU,IAA9D,0BClBDa,MAPf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,OCOSS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1ac94cb4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './counterStyle.css';\r\nfunction Counter() {\r\n    // Condition 1\r\n    //The counter can be initialised with a certain value. \r\n    // If no value is present at initialisation then the counter will start at 1.\r\n    const initialCounter = 1;\r\n    const maxCounter = 1000; \r\n    const [counter, setCounter] = useState(initialCounter)\r\n    useEffect(() => {\r\n        // Condition 2\r\n        // The counter can be initialised with a max value.\r\n        // If no max value is present, then assume that the max value will be 1000. \r\n        // If a max value is present then the counter can be incremented to only that max value.\r\n        console.log(\"Changed\");\r\n        counter >= maxCounter && setCounter(maxCounter)\r\n    }, [counter])\r\n    return (\r\n        <div>\r\n            <div className=\"counter-container flex-center\">\r\n                <div className=\"property\" onClick={() => setCounter(counter - 1)}>&minus;</div>\r\n                <div className=\"property\">\r\n                    {/* To avoide warning due to \"no input\" we added extra  check for empty input*/}\r\n                    {/* Condition 3: The user can also type a value into the counter. */}\r\n                    <input type=\"number\" value={counter} \r\n                        onChange={e => setCounter(e.target.value && parseInt(e.target.value))} />\r\n                </div>\r\n                <div className=\"property\" onClick={() => setCounter(counter + 1)}>&#65291;</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter;","import './App.css';\nimport Counter from './components/Counter';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}